import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;

public class Question_18 {
	public static void main(String[] args) throws InterruptedException {
		ExecutorService exec = Executors.newCachedThreadPool();
		NotTask obj = new NotTask();
		CallNotTask task = new CallNotTask(obj);
		Future<?> f = exec.submit(task);
		TimeUnit.MILLISECONDS.sleep(100);
		System.out.println("Aborting task");
		f.cancel(true);
		TimeUnit.MILLISECONDS.sleep(1000);
		System.out.println(task);
		System.out.println(obj);
		System.out.println("interrupt success");
		//success
//		Thread thread = new Thread(new CallNotTask(new NotTask()));
//		thread.start();
//		TimeUnit.SECONDS.sleep(3);
//		System.out.println("Aborting task");
//		thread.interrupt();
//		System.out.println("interrupt success");
	}

}
class NotTask {
	public void f() throws InterruptedException {
		TimeUnit.SECONDS.sleep(1);
		System.out.println("NotTask.f() end");
	}
}

class CallNotTask implements Runnable {
	private NotTask obj;
	public CallNotTask(NotTask obj) {
		this.obj = obj;
	}
	@Override
	public void run() {
		try {
			//obj.f();
			TimeUnit.SECONDS.sleep(5);
		} catch (InterruptedException e) {
			System.out.println("Interrupting Task");
		}
		System.out.println("Exit CallNotTask.run()");
	}
	
}
