package tij;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
/**
 * ExecutorService类的shutdownNow()方法和shutdown()方法区别：
 * shutdownNow(): Attempts to stop all actively executing tasks, halts the processing of waiting tasks, 
 *                and returns a list of the tasks that were awaiting execution. 
 * shutdown(): Initiates an orderly shutdown in which previously submitted tasks are executed,
 *             but no new tasks will be accepted. Invocation has no additional effect if already shut down. 
 */
public class Restaurant {
	Meal meal;
	WaitPerson waitPerson = new WaitPerson(this);
	Chef chef = new Chef(this);
	ExecutorService exec = Executors.newCachedThreadPool();
	public Restaurant() {
		exec.execute(chef);
		exec.execute(waitPerson);
	}
	public static void main(String[] args) {
		new Restaurant();
	}
}
class Meal {
	private int orderNum;
	Meal(int orderNum) {
		this.orderNum = orderNum;
	}
	@Override
	public String toString() {
		return "Meal " + orderNum;
	}
	
}
class WaitPerson implements Runnable {
	Restaurant restaurant;
	WaitPerson(Restaurant restaurant) {
		this.restaurant = restaurant;
	}
	@Override
	public void run() {
		try {
			while(!Thread.interrupted()) {
				synchronized(this) {
					while(restaurant.meal == null)
						wait();
				}
				System.out.println("WaitPerson got " + restaurant.meal);
				synchronized(restaurant.chef) {
					restaurant.meal = null;
					restaurant.chef.notifyAll();
				}
			}
		} catch(InterruptedException e) {
			e.printStackTrace();
		}
	}
	
}
class Chef implements Runnable {
	Restaurant restaurant;
	int count = 0;
	Chef(Restaurant restaurant) {
		this.restaurant = restaurant;
	}
	@Override
	public void run() {
		try {
			while(!Thread.interrupted()) {
				synchronized(this) { 
					while(restaurant.meal != null)
						wait();
				}
				System.out.println("Order up!");
				if(++count == 10) {
					System.out.println("Out of food, closing");
					restaurant.exec.shutdownNow();//注意这条语句
				}
				synchronized(restaurant.waitPerson) {
					restaurant.meal = new Meal(count);
					restaurant.waitPerson.notifyAll();
				}
			}
		} catch(InterruptedException e) {
			e.printStackTrace();
		}
	}
}
